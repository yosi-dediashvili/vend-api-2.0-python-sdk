# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..api_client import ApiClient


class ProductsApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_inventory_by_product_id(self, product_id, **kwargs):
        """
        Get inventory data for a single product
        Returns inventory data for a single product in all the outlets.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_inventory_by_product_id(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: Valid product ID. (required)
        :param float after: The lower limit for the version numbers to be included in the response.
        :param float before: The upper limit for the version numbers to be included in the response.
        :param float page_size: The maximum number of items to be returned in the response.
        :return: InventoryCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_inventory_by_product_id_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_inventory_by_product_id_with_http_info(product_id, **kwargs)
            return data

    def get_inventory_by_product_id_with_http_info(self, product_id, **kwargs):
        """
        Get inventory data for a single product
        Returns inventory data for a single product in all the outlets.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_inventory_by_product_id_with_http_info(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: Valid product ID. (required)
        :param float after: The lower limit for the version numbers to be included in the response.
        :param float before: The upper limit for the version numbers to be included in the response.
        :param float page_size: The maximum number of items to be returned in the response.
        :return: InventoryCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'after', 'before', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_inventory_by_product_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_inventory_by_product_id`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'before' in params:
            query_params.append(('before', params['before']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth', 'personal_token']

        return self.api_client.call_api('/products/{product_id}/inventory', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='InventoryCollection',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_product_by_id(self, product_id, **kwargs):
        """
        Get a single product
        Returns a single product object with a given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product_by_id(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: Valid product ID. (required)
        :return: ProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_product_by_id_with_http_info(product_id, **kwargs)
        else:
            (data) = self.get_product_by_id_with_http_info(product_id, **kwargs)
            return data

    def get_product_by_id_with_http_info(self, product_id, **kwargs):
        """
        Get a single product
        Returns a single product object with a given ID.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_product_by_id_with_http_info(product_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: Valid product ID. (required)
        :return: ProductResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_product_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `get_product_by_id`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth', 'personal_token']

        return self.api_client.call_api('/products/{product_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def list_products(self, **kwargs):
        """
        List products
        Returns a paginated list of products.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_products(async=True)
        >>> result = thread.get()

        :param async bool
        :param float after: The lower limit for the version numbers to be included in the response.
        :param float before: The upper limit for the version numbers to be included in the response.
        :param bool deleted: Indicates whether deleted items should be included in the response.
        :param float page_size: The maximum number of items to be returned in the response.
        :return: ProductCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_products_with_http_info(**kwargs)
        else:
            (data) = self.list_products_with_http_info(**kwargs)
            return data

    def list_products_with_http_info(self, **kwargs):
        """
        List products
        Returns a paginated list of products.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_products_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param float after: The lower limit for the version numbers to be included in the response.
        :param float before: The upper limit for the version numbers to be included in the response.
        :param bool deleted: Indicates whether deleted items should be included in the response.
        :param float page_size: The maximum number of items to be returned in the response.
        :return: ProductCollection
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['after', 'before', 'deleted', 'page_size']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_products" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []
        if 'after' in params:
            query_params.append(('after', params['after']))
        if 'before' in params:
            query_params.append(('before', params['before']))
        if 'deleted' in params:
            query_params.append(('deleted', params['deleted']))
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = ['oauth', 'personal_token']

        return self.api_client.call_api('/products', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ProductCollection',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def upload_image(self, product_id, image, **kwargs):
        """
        Upload an image
        Upload a binary file with an image to be used for a product. This request should be encoded as `multipart/form-data`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_image(product_id, image, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The ID of the product which the imaged should be associated with. (required)
        :param file image: File to upload. Can be in `jpg` or `png` format. (required)
        :return: ImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_image_with_http_info(product_id, image, **kwargs)
        else:
            (data) = self.upload_image_with_http_info(product_id, image, **kwargs)
            return data

    def upload_image_with_http_info(self, product_id, image, **kwargs):
        """
        Upload an image
        Upload a binary file with an image to be used for a product. This request should be encoded as `multipart/form-data`.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_image_with_http_info(product_id, image, async=True)
        >>> result = thread.get()

        :param async bool
        :param str product_id: The ID of the product which the imaged should be associated with. (required)
        :param file image: File to upload. Can be in `jpg` or `png` format. (required)
        :return: ImageResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id', 'image']
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params) or (params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `upload_image`")
        # verify the required parameter 'image' is set
        if ('image' not in params) or (params['image'] is None):
            raise ValueError("Missing the required parameter `image` when calling `upload_image`")


        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['product_id'] = params['product_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'image' in params:
            local_var_files['image'] = params['image']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = ['oauth', 'personal_token']

        return self.api_client.call_api('/products/{product_id}/actions/image_upload', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ImageResponse',
                                        auth_settings=auth_settings,
                                        async=params.get('async'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
