# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InventoryCount(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outlet_id': 'str',
        'due_at': 'str',
        'show_inactive': 'bool',
        'name': 'str',
        'status': 'str',
        'filters': 'list[InventoryCountFilter]',
        'type': 'str'
    }

    attribute_map = {
        'outlet_id': 'outlet_id',
        'due_at': 'due_at',
        'show_inactive': 'show_inactive',
        'name': 'name',
        'status': 'status',
        'filters': 'filters',
        'type': 'type'
    }

    def __init__(self, outlet_id=None, due_at=None, show_inactive=None, name=None, status=None, filters=None, type=None):
        """
        InventoryCount - a model defined in Swagger
        """

        self._outlet_id = None
        self._due_at = None
        self._show_inactive = None
        self._name = None
        self._status = None
        self._filters = None
        self._type = None

        self.outlet_id = outlet_id
        if due_at is not None:
          self.due_at = due_at
        if show_inactive is not None:
          self.show_inactive = show_inactive
        self.name = name
        self.status = status
        if filters is not None:
          self.filters = filters
        self.type = type

    @property
    def outlet_id(self):
        """
        Gets the outlet_id of this InventoryCount.
        The ID of the outlet in which the count is taking place.

        :return: The outlet_id of this InventoryCount.
        :rtype: str
        """
        return self._outlet_id

    @outlet_id.setter
    def outlet_id(self, outlet_id):
        """
        Sets the outlet_id of this InventoryCount.
        The ID of the outlet in which the count is taking place.

        :param outlet_id: The outlet_id of this InventoryCount.
        :type: str
        """
        if outlet_id is None:
            raise ValueError("Invalid value for `outlet_id`, must not be `None`")

        self._outlet_id = outlet_id

    @property
    def due_at(self):
        """
        Gets the due_at of this InventoryCount.
        The date for which the count is scheduled.

        :return: The due_at of this InventoryCount.
        :rtype: str
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at):
        """
        Sets the due_at of this InventoryCount.
        The date for which the count is scheduled.

        :param due_at: The due_at of this InventoryCount.
        :type: str
        """

        self._due_at = due_at

    @property
    def show_inactive(self):
        """
        Gets the show_inactive of this InventoryCount.
        Indicates whether inactive products should be included in the count.

        :return: The show_inactive of this InventoryCount.
        :rtype: bool
        """
        return self._show_inactive

    @show_inactive.setter
    def show_inactive(self, show_inactive):
        """
        Sets the show_inactive of this InventoryCount.
        Indicates whether inactive products should be included in the count.

        :param show_inactive: The show_inactive of this InventoryCount.
        :type: bool
        """

        self._show_inactive = show_inactive

    @property
    def name(self):
        """
        Gets the name of this InventoryCount.
        The name of the inventory count

        :return: The name of this InventoryCount.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this InventoryCount.
        The name of the inventory count

        :param name: The name of this InventoryCount.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def status(self):
        """
        Gets the status of this InventoryCount.
        The status of the inventory count. One of: `STOCKTAKE_SCHEDULED`, `STOCKTAKE_IN_PROGRESS`, `STOCKTAKE_IN_PROGRESS_PROCESSED`, `STOCKTAKE_COMPLETE`.

        :return: The status of this InventoryCount.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InventoryCount.
        The status of the inventory count. One of: `STOCKTAKE_SCHEDULED`, `STOCKTAKE_IN_PROGRESS`, `STOCKTAKE_IN_PROGRESS_PROCESSED`, `STOCKTAKE_COMPLETE`.

        :param status: The status of this InventoryCount.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def filters(self):
        """
        Gets the filters of this InventoryCount.
        An array of filter objects. Max 25.

        :return: The filters of this InventoryCount.
        :rtype: list[InventoryCountFilter]
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """
        Sets the filters of this InventoryCount.
        An array of filter objects. Max 25.

        :param filters: The filters of this InventoryCount.
        :type: list[InventoryCountFilter]
        """

        self._filters = filters

    @property
    def type(self):
        """
        Gets the type of this InventoryCount.
        Consignment type, for inventory counts always `STOCKTAKE`

        :return: The type of this InventoryCount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this InventoryCount.
        Consignment type, for inventory counts always `STOCKTAKE`

        :param type: The type of this InventoryCount.
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InventoryCount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
