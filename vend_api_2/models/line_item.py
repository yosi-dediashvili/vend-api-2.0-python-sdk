# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LineItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tax_id': 'str',
        'discount_total': 'float',
        'is_return': 'bool',
        'cost': 'float',
        'cost_total': 'float',
        'price_total': 'float',
        'tax': 'float',
        'tax_total': 'float',
        'product_id': 'str',
        'quantity': 'float',
        'price': 'float',
        'tax_components': 'list[LineItemTaxComponent]',
        'discount': 'float',
        'loyalty_value': 'float',
        'price_set': 'bool',
        'sequence': 'float',
        'note': 'str',
        'status': 'str'
    }

    attribute_map = {
        'tax_id': 'tax_id',
        'discount_total': 'discount_total',
        'is_return': 'is_return',
        'cost': 'cost',
        'cost_total': 'cost_total',
        'price_total': 'price_total',
        'tax': 'tax',
        'tax_total': 'tax_total',
        'product_id': 'product_id',
        'quantity': 'quantity',
        'price': 'price',
        'tax_components': 'tax_components',
        'discount': 'discount',
        'loyalty_value': 'loyalty_value',
        'price_set': 'price_set',
        'sequence': 'sequence',
        'note': 'note',
        'status': 'status'
    }

    def __init__(self, tax_id=None, discount_total=None, is_return=None, cost=None, cost_total=None, price_total=None, tax=None, tax_total=None, product_id=None, quantity=None, price=None, tax_components=None, discount=None, loyalty_value=None, price_set=None, sequence=None, note=None, status=None):
        """
        LineItem - a model defined in Swagger
        """

        self._tax_id = None
        self._discount_total = None
        self._is_return = None
        self._cost = None
        self._cost_total = None
        self._price_total = None
        self._tax = None
        self._tax_total = None
        self._product_id = None
        self._quantity = None
        self._price = None
        self._tax_components = None
        self._discount = None
        self._loyalty_value = None
        self._price_set = None
        self._sequence = None
        self._note = None
        self._status = None
        self.discriminator = None

        if tax_id is not None:
          self.tax_id = tax_id
        if discount_total is not None:
          self.discount_total = discount_total
        if is_return is not None:
          self.is_return = is_return
        if cost is not None:
          self.cost = cost
        if cost_total is not None:
          self.cost_total = cost_total
        if price_total is not None:
          self.price_total = price_total
        if tax is not None:
          self.tax = tax
        if tax_total is not None:
          self.tax_total = tax_total
        if product_id is not None:
          self.product_id = product_id
        if quantity is not None:
          self.quantity = quantity
        if price is not None:
          self.price = price
        if tax_components is not None:
          self.tax_components = tax_components
        if discount is not None:
          self.discount = discount
        if loyalty_value is not None:
          self.loyalty_value = loyalty_value
        if price_set is not None:
          self.price_set = price_set
        if sequence is not None:
          self.sequence = sequence
        if note is not None:
          self.note = note
        if status is not None:
          self.status = status

    @property
    def tax_id(self):
        """
        Gets the tax_id of this LineItem.
        ???

        :return: The tax_id of this LineItem.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """
        Sets the tax_id of this LineItem.
        ???

        :param tax_id: The tax_id of this LineItem.
        :type: str
        """

        self._tax_id = tax_id

    @property
    def discount_total(self):
        """
        Gets the discount_total of this LineItem.
        Total discount for the line item.

        :return: The discount_total of this LineItem.
        :rtype: float
        """
        return self._discount_total

    @discount_total.setter
    def discount_total(self, discount_total):
        """
        Sets the discount_total of this LineItem.
        Total discount for the line item.

        :param discount_total: The discount_total of this LineItem.
        :type: float
        """

        self._discount_total = discount_total

    @property
    def is_return(self):
        """
        Gets the is_return of this LineItem.
        Indicates whether this line item is a return from another sale (referenced by `return_for` on the main sale object).

        :return: The is_return of this LineItem.
        :rtype: bool
        """
        return self._is_return

    @is_return.setter
    def is_return(self, is_return):
        """
        Sets the is_return of this LineItem.
        Indicates whether this line item is a return from another sale (referenced by `return_for` on the main sale object).

        :param is_return: The is_return of this LineItem.
        :type: bool
        """

        self._is_return = is_return

    @property
    def cost(self):
        """
        Gets the cost of this LineItem.
        Unit cost for the line item.

        :return: The cost of this LineItem.
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this LineItem.
        Unit cost for the line item.

        :param cost: The cost of this LineItem.
        :type: float
        """

        self._cost = cost

    @property
    def cost_total(self):
        """
        Gets the cost_total of this LineItem.
        Total cost for the line item.

        :return: The cost_total of this LineItem.
        :rtype: float
        """
        return self._cost_total

    @cost_total.setter
    def cost_total(self, cost_total):
        """
        Sets the cost_total of this LineItem.
        Total cost for the line item.

        :param cost_total: The cost_total of this LineItem.
        :type: float
        """

        self._cost_total = cost_total

    @property
    def price_total(self):
        """
        Gets the price_total of this LineItem.
        Total price for the line item.

        :return: The price_total of this LineItem.
        :rtype: float
        """
        return self._price_total

    @price_total.setter
    def price_total(self, price_total):
        """
        Sets the price_total of this LineItem.
        Total price for the line item.

        :param price_total: The price_total of this LineItem.
        :type: float
        """

        self._price_total = price_total

    @property
    def tax(self):
        """
        Gets the tax of this LineItem.
        Unit tax for the line item. **deprecated** ???

        :return: The tax of this LineItem.
        :rtype: float
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this LineItem.
        Unit tax for the line item. **deprecated** ???

        :param tax: The tax of this LineItem.
        :type: float
        """

        self._tax = tax

    @property
    def tax_total(self):
        """
        Gets the tax_total of this LineItem.
        Total tax value.

        :return: The tax_total of this LineItem.
        :rtype: float
        """
        return self._tax_total

    @tax_total.setter
    def tax_total(self, tax_total):
        """
        Sets the tax_total of this LineItem.
        Total tax value.

        :param tax_total: The tax_total of this LineItem.
        :type: float
        """

        self._tax_total = tax_total

    @property
    def product_id(self):
        """
        Gets the product_id of this LineItem.
        Valid product ID.

        :return: The product_id of this LineItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this LineItem.
        Valid product ID.

        :param product_id: The product_id of this LineItem.
        :type: str
        """

        self._product_id = product_id

    @property
    def quantity(self):
        """
        Gets the quantity of this LineItem.
        Quantity of product units included in the sale.

        :return: The quantity of this LineItem.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """
        Sets the quantity of this LineItem.
        Quantity of product units included in the sale.

        :param quantity: The quantity of this LineItem.
        :type: float
        """

        self._quantity = quantity

    @property
    def price(self):
        """
        Gets the price of this LineItem.
        Unit price for the product.

        :return: The price of this LineItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this LineItem.
        Unit price for the product.

        :param price: The price of this LineItem.
        :type: float
        """

        self._price = price

    @property
    def tax_components(self):
        """
        Gets the tax_components of this LineItem.
        Collection of tax components associated with the line item.

        :return: The tax_components of this LineItem.
        :rtype: list[LineItemTaxComponent]
        """
        return self._tax_components

    @tax_components.setter
    def tax_components(self, tax_components):
        """
        Sets the tax_components of this LineItem.
        Collection of tax components associated with the line item.

        :param tax_components: The tax_components of this LineItem.
        :type: list[LineItemTaxComponent]
        """

        self._tax_components = tax_components

    @property
    def discount(self):
        """
        Gets the discount of this LineItem.
        Discount. ??? Unit? Should that be even posted?

        :return: The discount of this LineItem.
        :rtype: float
        """
        return self._discount

    @discount.setter
    def discount(self, discount):
        """
        Sets the discount of this LineItem.
        Discount. ??? Unit? Should that be even posted?

        :param discount: The discount of this LineItem.
        :type: float
        """

        self._discount = discount

    @property
    def loyalty_value(self):
        """
        Gets the loyalty_value of this LineItem.
        The value that should be added to associated customer's loyalty balance.

        :return: The loyalty_value of this LineItem.
        :rtype: float
        """
        return self._loyalty_value

    @loyalty_value.setter
    def loyalty_value(self, loyalty_value):
        """
        Sets the loyalty_value of this LineItem.
        The value that should be added to associated customer's loyalty balance.

        :param loyalty_value: The loyalty_value of this LineItem.
        :type: float
        """

        self._loyalty_value = loyalty_value

    @property
    def price_set(self):
        """
        Gets the price_set of this LineItem.
        Indicates whether the price was set manually. Using `true` means that the value will never be refreshed from the price book when reloaded (sale retrieved from parked sales).

        :return: The price_set of this LineItem.
        :rtype: bool
        """
        return self._price_set

    @price_set.setter
    def price_set(self, price_set):
        """
        Sets the price_set of this LineItem.
        Indicates whether the price was set manually. Using `true` means that the value will never be refreshed from the price book when reloaded (sale retrieved from parked sales).

        :param price_set: The price_set of this LineItem.
        :type: bool
        """

        self._price_set = price_set

    @property
    def sequence(self):
        """
        Gets the sequence of this LineItem.
        Order of the line item in the sale.

        :return: The sequence of this LineItem.
        :rtype: float
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """
        Sets the sequence of this LineItem.
        Order of the line item in the sale.

        :param sequence: The sequence of this LineItem.
        :type: float
        """

        self._sequence = sequence

    @property
    def note(self):
        """
        Gets the note of this LineItem.
        Line item note.

        :return: The note of this LineItem.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this LineItem.
        Line item note.

        :param note: The note of this LineItem.
        :type: str
        """

        self._note = note

    @property
    def status(self):
        """
        Gets the status of this LineItem.
        Line item status. ???

        :return: The status of this LineItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this LineItem.
        Line item status. ???

        :param status: The status of this LineItem.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LineItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
