# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PriceBook(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'customer_group_id': 'str',
        'id': 'str',
        'valid_from': 'str',
        'valid_to': 'str',
        'restrict_to_platform_key': 'str',
        'outlet_id': 'str',
        'restrict_to_platform_label': 'str',
        'customer_group': 'CustomerGroup',
        'version': 'float',
        'deleted_at': 'str'
    }

    attribute_map = {
        'name': 'name',
        'customer_group_id': 'customer_group_id',
        'id': 'id',
        'valid_from': 'valid_from',
        'valid_to': 'valid_to',
        'restrict_to_platform_key': 'restrict_to_platform_key',
        'outlet_id': 'outlet_id',
        'restrict_to_platform_label': 'restrict_to_platform_label',
        'customer_group': 'customer_group',
        'version': 'version',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, name=None, customer_group_id=None, id=None, valid_from=None, valid_to=None, restrict_to_platform_key=None, outlet_id=None, restrict_to_platform_label=None, customer_group=None, version=None, deleted_at=None):
        """
        PriceBook - a model defined in Swagger
        """

        self._name = None
        self._customer_group_id = None
        self._id = None
        self._valid_from = None
        self._valid_to = None
        self._restrict_to_platform_key = None
        self._outlet_id = None
        self._restrict_to_platform_label = None
        self._customer_group = None
        self._version = None
        self._deleted_at = None

        self.name = name
        self.customer_group_id = customer_group_id
        if id is not None:
          self.id = id
        if valid_from is not None:
          self.valid_from = valid_from
        if valid_to is not None:
          self.valid_to = valid_to
        if restrict_to_platform_key is not None:
          self.restrict_to_platform_key = restrict_to_platform_key
        if outlet_id is not None:
          self.outlet_id = outlet_id
        if restrict_to_platform_label is not None:
          self.restrict_to_platform_label = restrict_to_platform_label
        if customer_group is not None:
          self.customer_group = customer_group
        if version is not None:
          self.version = version
        if deleted_at is not None:
          self.deleted_at = deleted_at

    @property
    def name(self):
        """
        Gets the name of this PriceBook.
        Price book name.

        :return: The name of this PriceBook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this PriceBook.
        Price book name.

        :param name: The name of this PriceBook.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def customer_group_id(self):
        """
        Gets the customer_group_id of this PriceBook.
        The ID of the customer group

        :return: The customer_group_id of this PriceBook.
        :rtype: str
        """
        return self._customer_group_id

    @customer_group_id.setter
    def customer_group_id(self, customer_group_id):
        """
        Sets the customer_group_id of this PriceBook.
        The ID of the customer group

        :param customer_group_id: The customer_group_id of this PriceBook.
        :type: str
        """
        if customer_group_id is None:
            raise ValueError("Invalid value for `customer_group_id`, must not be `None`")

        self._customer_group_id = customer_group_id

    @property
    def id(self):
        """
        Gets the id of this PriceBook.
        Auto-generated object ID.

        :return: The id of this PriceBook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PriceBook.
        Auto-generated object ID.

        :param id: The id of this PriceBook.
        :type: str
        """

        self._id = id

    @property
    def valid_from(self):
        """
        Gets the valid_from of this PriceBook.
        The date when the price book becomes valid (active).

        :return: The valid_from of this PriceBook.
        :rtype: str
        """
        return self._valid_from

    @valid_from.setter
    def valid_from(self, valid_from):
        """
        Sets the valid_from of this PriceBook.
        The date when the price book becomes valid (active).

        :param valid_from: The valid_from of this PriceBook.
        :type: str
        """

        self._valid_from = valid_from

    @property
    def valid_to(self):
        """
        Gets the valid_to of this PriceBook.
        The date when the price book becomes invalid (inactive).

        :return: The valid_to of this PriceBook.
        :rtype: str
        """
        return self._valid_to

    @valid_to.setter
    def valid_to(self, valid_to):
        """
        Sets the valid_to of this PriceBook.
        The date when the price book becomes invalid (inactive).

        :param valid_to: The valid_to of this PriceBook.
        :type: str
        """

        self._valid_to = valid_to

    @property
    def restrict_to_platform_key(self):
        """
        Gets the restrict_to_platform_key of this PriceBook.
        `\"0\"` - all platforms, `\"1\"` - in store, `\"2\"` - ecommerce.

        :return: The restrict_to_platform_key of this PriceBook.
        :rtype: str
        """
        return self._restrict_to_platform_key

    @restrict_to_platform_key.setter
    def restrict_to_platform_key(self, restrict_to_platform_key):
        """
        Sets the restrict_to_platform_key of this PriceBook.
        `\"0\"` - all platforms, `\"1\"` - in store, `\"2\"` - ecommerce.

        :param restrict_to_platform_key: The restrict_to_platform_key of this PriceBook.
        :type: str
        """

        self._restrict_to_platform_key = restrict_to_platform_key

    @property
    def outlet_id(self):
        """
        Gets the outlet_id of this PriceBook.
        The ID of an outlet for which the price book should be used.+ type: GENERAL (string) - Internal value. Safe to ignore.

        :return: The outlet_id of this PriceBook.
        :rtype: str
        """
        return self._outlet_id

    @outlet_id.setter
    def outlet_id(self, outlet_id):
        """
        Sets the outlet_id of this PriceBook.
        The ID of an outlet for which the price book should be used.+ type: GENERAL (string) - Internal value. Safe to ignore.

        :param outlet_id: The outlet_id of this PriceBook.
        :type: str
        """

        self._outlet_id = outlet_id

    @property
    def restrict_to_platform_label(self):
        """
        Gets the restrict_to_platform_label of this PriceBook.
        One of `In Store`, `Ecommerce`, `All Platforms`.

        :return: The restrict_to_platform_label of this PriceBook.
        :rtype: str
        """
        return self._restrict_to_platform_label

    @restrict_to_platform_label.setter
    def restrict_to_platform_label(self, restrict_to_platform_label):
        """
        Sets the restrict_to_platform_label of this PriceBook.
        One of `In Store`, `Ecommerce`, `All Platforms`.

        :param restrict_to_platform_label: The restrict_to_platform_label of this PriceBook.
        :type: str
        """

        self._restrict_to_platform_label = restrict_to_platform_label

    @property
    def customer_group(self):
        """
        Gets the customer_group of this PriceBook.

        :return: The customer_group of this PriceBook.
        :rtype: CustomerGroup
        """
        return self._customer_group

    @customer_group.setter
    def customer_group(self, customer_group):
        """
        Sets the customer_group of this PriceBook.

        :param customer_group: The customer_group of this PriceBook.
        :type: CustomerGroup
        """

        self._customer_group = customer_group

    @property
    def version(self):
        """
        Gets the version of this PriceBook.
        Auto-incrementing object version number.

        :return: The version of this PriceBook.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this PriceBook.
        Auto-incrementing object version number.

        :param version: The version of this PriceBook.
        :type: float
        """

        self._version = version

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this PriceBook.
        Deletion timestamp in UTC.

        :return: The deleted_at of this PriceBook.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this PriceBook.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this PriceBook.
        :type: str
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PriceBook):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
