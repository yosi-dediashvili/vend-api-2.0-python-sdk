# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class User(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'username': 'str',
        'display_name': 'str',
        'email': 'str',
        'email_verified_at': 'str',
        'restricted_outlet_id': 'str',
        'restricted_outlet_ids': 'list[str]',
        'account_type': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str',
        'seen_at': 'str',
        'target_daily': 'float',
        'target_weekly': 'float',
        'target_monthly': 'float',
        'version': 'int',
        'is_primary_user': 'bool',
        'image_source': 'str',
        'images': 'UserImages'
    }

    attribute_map = {
        'id': 'id',
        'username': 'username',
        'display_name': 'display_name',
        'email': 'email',
        'email_verified_at': 'email_verified_at',
        'restricted_outlet_id': 'restricted_outlet_id',
        'restricted_outlet_ids': 'restricted_outlet_ids',
        'account_type': 'account_type',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at',
        'seen_at': 'seen_at',
        'target_daily': 'target_daily',
        'target_weekly': 'target_weekly',
        'target_monthly': 'target_monthly',
        'version': 'version',
        'is_primary_user': 'is_primary_user',
        'image_source': 'image_source',
        'images': 'images'
    }

    def __init__(self, id=None, username=None, display_name=None, email=None, email_verified_at=None, restricted_outlet_id=None, restricted_outlet_ids=None, account_type=None, created_at=None, updated_at=None, deleted_at=None, seen_at=None, target_daily=None, target_weekly=None, target_monthly=None, version=None, is_primary_user=None, image_source=None, images=None):
        """
        User - a model defined in Swagger
        """

        self._id = None
        self._username = None
        self._display_name = None
        self._email = None
        self._email_verified_at = None
        self._restricted_outlet_id = None
        self._restricted_outlet_ids = None
        self._account_type = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self._seen_at = None
        self._target_daily = None
        self._target_weekly = None
        self._target_monthly = None
        self._version = None
        self._is_primary_user = None
        self._image_source = None
        self._images = None
        self.discriminator = None

        self.id = id
        self.username = username
        if display_name is not None:
          self.display_name = display_name
        if email is not None:
          self.email = email
        if email_verified_at is not None:
          self.email_verified_at = email_verified_at
        if restricted_outlet_id is not None:
          self.restricted_outlet_id = restricted_outlet_id
        if restricted_outlet_ids is not None:
          self.restricted_outlet_ids = restricted_outlet_ids
        self.account_type = account_type
        self.created_at = created_at
        self.updated_at = updated_at
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if seen_at is not None:
          self.seen_at = seen_at
        if target_daily is not None:
          self.target_daily = target_daily
        if target_weekly is not None:
          self.target_weekly = target_weekly
        if target_monthly is not None:
          self.target_monthly = target_monthly
        self.version = version
        self.is_primary_user = is_primary_user
        if image_source is not None:
          self.image_source = image_source
        if images is not None:
          self.images = images

    @property
    def id(self):
        """
        Gets the id of this User.
        Auto-generated object ID.

        :return: The id of this User.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this User.
        Auto-generated object ID.

        :param id: The id of this User.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def username(self):
        """
        Gets the username of this User.
        User's username used for login.

        :return: The username of this User.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """
        Sets the username of this User.
        User's username used for login.

        :param username: The username of this User.
        :type: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")

        self._username = username

    @property
    def display_name(self):
        """
        Gets the display_name of this User.
        Full user's name to be used for display in the UI.

        :return: The display_name of this User.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this User.
        Full user's name to be used for display in the UI.

        :param display_name: The display_name of this User.
        :type: str
        """

        self._display_name = display_name

    @property
    def email(self):
        """
        Gets the email of this User.
        User's email address.

        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """
        Sets the email of this User.
        User's email address.

        :param email: The email of this User.
        :type: str
        """

        self._email = email

    @property
    def email_verified_at(self):
        """
        Gets the email_verified_at of this User.
        The timestamp of users email verification.

        :return: The email_verified_at of this User.
        :rtype: str
        """
        return self._email_verified_at

    @email_verified_at.setter
    def email_verified_at(self, email_verified_at):
        """
        Sets the email_verified_at of this User.
        The timestamp of users email verification.

        :param email_verified_at: The email_verified_at of this User.
        :type: str
        """

        self._email_verified_at = email_verified_at

    @property
    def restricted_outlet_id(self):
        """
        Gets the restricted_outlet_id of this User.
        **deprecated** Use the `restricted_outlet_ids` instead.

        :return: The restricted_outlet_id of this User.
        :rtype: str
        """
        return self._restricted_outlet_id

    @restricted_outlet_id.setter
    def restricted_outlet_id(self, restricted_outlet_id):
        """
        Sets the restricted_outlet_id of this User.
        **deprecated** Use the `restricted_outlet_ids` instead.

        :param restricted_outlet_id: The restricted_outlet_id of this User.
        :type: str
        """

        self._restricted_outlet_id = restricted_outlet_id

    @property
    def restricted_outlet_ids(self):
        """
        Gets the restricted_outlet_ids of this User.
        A list of outlet IDs the user is associated with

        :return: The restricted_outlet_ids of this User.
        :rtype: list[str]
        """
        return self._restricted_outlet_ids

    @restricted_outlet_ids.setter
    def restricted_outlet_ids(self, restricted_outlet_ids):
        """
        Sets the restricted_outlet_ids of this User.
        A list of outlet IDs the user is associated with

        :param restricted_outlet_ids: The restricted_outlet_ids of this User.
        :type: list[str]
        """

        self._restricted_outlet_ids = restricted_outlet_ids

    @property
    def account_type(self):
        """
        Gets the account_type of this User.
        User's account type.

        :return: The account_type of this User.
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """
        Sets the account_type of this User.
        User's account type.

        :param account_type: The account_type of this User.
        :type: str
        """
        if account_type is None:
            raise ValueError("Invalid value for `account_type`, must not be `None`")
        allowed_values = ["cashier", "manager", "admin"]
        if account_type not in allowed_values:
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def created_at(self):
        """
        Gets the created_at of this User.
        Creation timestamp in UTC.

        :return: The created_at of this User.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this User.
        Creation timestamp in UTC.

        :param created_at: The created_at of this User.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this User.
        Last update timestamp in UTC.

        :return: The updated_at of this User.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this User.
        Last update timestamp in UTC.

        :param updated_at: The updated_at of this User.
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this User.
        Deletion timestamp in UTC.

        :return: The deleted_at of this User.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this User.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this User.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def seen_at(self):
        """
        Gets the seen_at of this User.
        The timestamp of the user's last activity in the system.

        :return: The seen_at of this User.
        :rtype: str
        """
        return self._seen_at

    @seen_at.setter
    def seen_at(self, seen_at):
        """
        Sets the seen_at of this User.
        The timestamp of the user's last activity in the system.

        :param seen_at: The seen_at of this User.
        :type: str
        """

        self._seen_at = seen_at

    @property
    def target_daily(self):
        """
        Gets the target_daily of this User.
        Daily sales target for the user.

        :return: The target_daily of this User.
        :rtype: float
        """
        return self._target_daily

    @target_daily.setter
    def target_daily(self, target_daily):
        """
        Sets the target_daily of this User.
        Daily sales target for the user.

        :param target_daily: The target_daily of this User.
        :type: float
        """

        self._target_daily = target_daily

    @property
    def target_weekly(self):
        """
        Gets the target_weekly of this User.
        Weekly sales target for the user.

        :return: The target_weekly of this User.
        :rtype: float
        """
        return self._target_weekly

    @target_weekly.setter
    def target_weekly(self, target_weekly):
        """
        Sets the target_weekly of this User.
        Weekly sales target for the user.

        :param target_weekly: The target_weekly of this User.
        :type: float
        """

        self._target_weekly = target_weekly

    @property
    def target_monthly(self):
        """
        Gets the target_monthly of this User.
        Monthly sales target for the user.

        :return: The target_monthly of this User.
        :rtype: float
        """
        return self._target_monthly

    @target_monthly.setter
    def target_monthly(self, target_monthly):
        """
        Sets the target_monthly of this User.
        Monthly sales target for the user.

        :param target_monthly: The target_monthly of this User.
        :type: float
        """

        self._target_monthly = target_monthly

    @property
    def version(self):
        """
        Gets the version of this User.
        Auto-incrementing version number

        :return: The version of this User.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this User.
        Auto-incrementing version number

        :param version: The version of this User.
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def is_primary_user(self):
        """
        Gets the is_primary_user of this User.
        Indicated whether this user is the primary user for the account.

        :return: The is_primary_user of this User.
        :rtype: bool
        """
        return self._is_primary_user

    @is_primary_user.setter
    def is_primary_user(self, is_primary_user):
        """
        Sets the is_primary_user of this User.
        Indicated whether this user is the primary user for the account.

        :param is_primary_user: The is_primary_user of this User.
        :type: bool
        """
        if is_primary_user is None:
            raise ValueError("Invalid value for `is_primary_user`, must not be `None`")

        self._is_primary_user = is_primary_user

    @property
    def image_source(self):
        """
        Gets the image_source of this User.
        URL of the default-sized user's avatar.

        :return: The image_source of this User.
        :rtype: str
        """
        return self._image_source

    @image_source.setter
    def image_source(self, image_source):
        """
        Sets the image_source of this User.
        URL of the default-sized user's avatar.

        :param image_source: The image_source of this User.
        :type: str
        """

        self._image_source = image_source

    @property
    def images(self):
        """
        Gets the images of this User.

        :return: The images of this User.
        :rtype: UserImages
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this User.

        :param images: The images of this User.
        :type: UserImages
        """

        self._images = images

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, User):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
