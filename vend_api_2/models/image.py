# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'version': 'int',
        'product_id': 'str',
        'position': 'float',
        'status': 'str'
    }

    attribute_map = {
        'id': 'id',
        'version': 'version',
        'product_id': 'product_id',
        'position': 'position',
        'status': 'status'
    }

    def __init__(self, id=None, version=None, product_id=None, position=None, status=None):
        """
        Image - a model defined in Swagger
        """

        self._id = None
        self._version = None
        self._product_id = None
        self._position = None
        self._status = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if version is not None:
          self.version = version
        if product_id is not None:
          self.product_id = product_id
        if position is not None:
          self.position = position
        if status is not None:
          self.status = status

    @property
    def id(self):
        """
        Gets the id of this Image.
        Auto-generated object ID.

        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Image.
        Auto-generated object ID.

        :param id: The id of this Image.
        :type: str
        """

        self._id = id

    @property
    def version(self):
        """
        Gets the version of this Image.
        Auto-incrementing object version number.

        :return: The version of this Image.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Image.
        Auto-incrementing object version number.

        :param version: The version of this Image.
        :type: int
        """

        self._version = version

    @property
    def product_id(self):
        """
        Gets the product_id of this Image.
        The ID of the product this image is associated with.

        :return: The product_id of this Image.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Image.
        The ID of the product this image is associated with.

        :param product_id: The product_id of this Image.
        :type: str
        """

        self._product_id = product_id

    @property
    def position(self):
        """
        Gets the position of this Image.
        Position of the image in collection of images associated with a product.

        :return: The position of this Image.
        :rtype: float
        """
        return self._position

    @position.setter
    def position(self, position):
        """
        Sets the position of this Image.
        Position of the image in collection of images associated with a product.

        :param position: The position of this Image.
        :type: float
        """

        self._position = position

    @property
    def status(self):
        """
        Gets the status of this Image.
        Status if the image upload processing. Can be `processing`, `uploaded`, `error`.

        :return: The status of this Image.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Image.
        Status if the image upload processing. Can be `processing`, `uploaded`, `error`.

        :param status: The status of this Image.
        :type: str
        """

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
