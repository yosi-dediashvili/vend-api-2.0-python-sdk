# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Product(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'handle': 'str',
        'sku': 'str',
        'id': 'str',
        'source_id': 'str',
        'source_variant_id': 'str',
        'variant_parent_id': 'str',
        'source': 'str',
        'active': 'bool',
        'has_inventory': 'bool',
        'is_composite': 'bool',
        'has_variants': 'bool',
        'description': 'str',
        'supplier_code': 'str',
        'supply_price': 'float',
        'type': 'ProductTypeSample',
        'supplier': 'SupplierSample',
        'brand': 'BrandSample',
        'variant_options': 'list[VariantOption]',
        'categories': 'list[Tag]',
        'image_url': 'str',
        'image_thumbnail_url': 'str',
        'images': 'list[ImageSample]',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str',
        'version': 'int'
    }

    attribute_map = {
        'name': 'name',
        'handle': 'handle',
        'sku': 'sku',
        'id': 'id',
        'source_id': 'source_id',
        'source_variant_id': 'source_variant_id',
        'variant_parent_id': 'variant_parent_id',
        'source': 'source',
        'active': 'active',
        'has_inventory': 'has_inventory',
        'is_composite': 'is_composite',
        'has_variants': 'has_variants',
        'description': 'description',
        'supplier_code': 'supplier_code',
        'supply_price': 'supply_price',
        'type': 'type',
        'supplier': 'supplier',
        'brand': 'brand',
        'variant_options': 'variant_options',
        'categories': 'categories',
        'image_url': 'image_url',
        'image_thumbnail_url': 'image_thumbnail_url',
        'images': 'images',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at',
        'version': 'version'
    }

    def __init__(self, name=None, handle=None, sku=None, id=None, source_id=None, source_variant_id=None, variant_parent_id=None, source=None, active=None, has_inventory=None, is_composite=None, has_variants=None, description=None, supplier_code=None, supply_price=None, type=None, supplier=None, brand=None, variant_options=None, categories=None, image_url=None, image_thumbnail_url=None, images=None, created_at=None, updated_at=None, deleted_at=None, version=None):
        """
        Product - a model defined in Swagger
        """

        self._name = None
        self._handle = None
        self._sku = None
        self._id = None
        self._source_id = None
        self._source_variant_id = None
        self._variant_parent_id = None
        self._source = None
        self._active = None
        self._has_inventory = None
        self._is_composite = None
        self._has_variants = None
        self._description = None
        self._supplier_code = None
        self._supply_price = None
        self._type = None
        self._supplier = None
        self._brand = None
        self._variant_options = None
        self._categories = None
        self._image_url = None
        self._image_thumbnail_url = None
        self._images = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self._version = None
        self.discriminator = None

        self.name = name
        self.handle = handle
        self.sku = sku
        if id is not None:
          self.id = id
        if source_id is not None:
          self.source_id = source_id
        if source_variant_id is not None:
          self.source_variant_id = source_variant_id
        if variant_parent_id is not None:
          self.variant_parent_id = variant_parent_id
        if source is not None:
          self.source = source
        if active is not None:
          self.active = active
        if has_inventory is not None:
          self.has_inventory = has_inventory
        if is_composite is not None:
          self.is_composite = is_composite
        if has_variants is not None:
          self.has_variants = has_variants
        if description is not None:
          self.description = description
        if supplier_code is not None:
          self.supplier_code = supplier_code
        if supply_price is not None:
          self.supply_price = supply_price
        if type is not None:
          self.type = type
        if supplier is not None:
          self.supplier = supplier
        if brand is not None:
          self.brand = brand
        if variant_options is not None:
          self.variant_options = variant_options
        if categories is not None:
          self.categories = categories
        if image_url is not None:
          self.image_url = image_url
        if image_thumbnail_url is not None:
          self.image_thumbnail_url = image_thumbnail_url
        if images is not None:
          self.images = images
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if version is not None:
          self.version = version

    @property
    def name(self):
        """
        Gets the name of this Product.
        Product name.

        :return: The name of this Product.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Product.
        Product name.

        :param name: The name of this Product.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def handle(self):
        """
        Gets the handle of this Product.
        Product handle. **Note:** Variants share the same handle.

        :return: The handle of this Product.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle):
        """
        Sets the handle of this Product.
        Product handle. **Note:** Variants share the same handle.

        :param handle: The handle of this Product.
        :type: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")

        self._handle = handle

    @property
    def sku(self):
        """
        Gets the sku of this Product.
        Product sku. **Note:** Should be unique, but it's not verified while posting.

        :return: The sku of this Product.
        :rtype: str
        """
        return self._sku

    @sku.setter
    def sku(self, sku):
        """
        Sets the sku of this Product.
        Product sku. **Note:** Should be unique, but it's not verified while posting.

        :param sku: The sku of this Product.
        :type: str
        """
        if sku is None:
            raise ValueError("Invalid value for `sku`, must not be `None`")

        self._sku = sku

    @property
    def id(self):
        """
        Gets the id of this Product.
        Auto-generated object ID.

        :return: The id of this Product.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Product.
        Auto-generated object ID.

        :param id: The id of this Product.
        :type: str
        """

        self._id = id

    @property
    def source_id(self):
        """
        Gets the source_id of this Product.
        External reference ID.

        :return: The source_id of this Product.
        :rtype: str
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this Product.
        External reference ID.

        :param source_id: The source_id of this Product.
        :type: str
        """

        self._source_id = source_id

    @property
    def source_variant_id(self):
        """
        Gets the source_variant_id of this Product.
        Secondary external reference ID.

        :return: The source_variant_id of this Product.
        :rtype: str
        """
        return self._source_variant_id

    @source_variant_id.setter
    def source_variant_id(self, source_variant_id):
        """
        Sets the source_variant_id of this Product.
        Secondary external reference ID.

        :param source_variant_id: The source_variant_id of this Product.
        :type: str
        """

        self._source_variant_id = source_variant_id

    @property
    def variant_parent_id(self):
        """
        Gets the variant_parent_id of this Product.
        This value is set if a Product is a variant of another Product.

        :return: The variant_parent_id of this Product.
        :rtype: str
        """
        return self._variant_parent_id

    @variant_parent_id.setter
    def variant_parent_id(self, variant_parent_id):
        """
        Sets the variant_parent_id of this Product.
        This value is set if a Product is a variant of another Product.

        :param variant_parent_id: The variant_parent_id of this Product.
        :type: str
        """

        self._variant_parent_id = variant_parent_id

    @property
    def source(self):
        """
        Gets the source of this Product.
        Indicates the origin of the product. Can be USER, SYSTEM, SHOPIFY.

        :return: The source of this Product.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """
        Sets the source of this Product.
        Indicates the origin of the product. Can be USER, SYSTEM, SHOPIFY.

        :param source: The source of this Product.
        :type: str
        """

        self._source = source

    @property
    def active(self):
        """
        Gets the active of this Product.
        Indicated whether the Product is active.

        :return: The active of this Product.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """
        Sets the active of this Product.
        Indicated whether the Product is active.

        :param active: The active of this Product.
        :type: bool
        """

        self._active = active

    @property
    def has_inventory(self):
        """
        Gets the has_inventory of this Product.
        Indicates whether inventory is being tracked for the Product.

        :return: The has_inventory of this Product.
        :rtype: bool
        """
        return self._has_inventory

    @has_inventory.setter
    def has_inventory(self, has_inventory):
        """
        Sets the has_inventory of this Product.
        Indicates whether inventory is being tracked for the Product.

        :param has_inventory: The has_inventory of this Product.
        :type: bool
        """

        self._has_inventory = has_inventory

    @property
    def is_composite(self):
        """
        Gets the is_composite of this Product.
        Indicates whether the Product is a composite one.

        :return: The is_composite of this Product.
        :rtype: bool
        """
        return self._is_composite

    @is_composite.setter
    def is_composite(self, is_composite):
        """
        Sets the is_composite of this Product.
        Indicates whether the Product is a composite one.

        :param is_composite: The is_composite of this Product.
        :type: bool
        """

        self._is_composite = is_composite

    @property
    def has_variants(self):
        """
        Gets the has_variants of this Product.
        Indicated whether product has variants.

        :return: The has_variants of this Product.
        :rtype: bool
        """
        return self._has_variants

    @has_variants.setter
    def has_variants(self, has_variants):
        """
        Sets the has_variants of this Product.
        Indicated whether product has variants.

        :param has_variants: The has_variants of this Product.
        :type: bool
        """

        self._has_variants = has_variants

    @property
    def description(self):
        """
        Gets the description of this Product.
        A detailed description of the Product. **Note** Can contain HTML.

        :return: The description of this Product.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Product.
        A detailed description of the Product. **Note** Can contain HTML.

        :param description: The description of this Product.
        :type: str
        """

        self._description = description

    @property
    def supplier_code(self):
        """
        Gets the supplier_code of this Product.
        Supplier code.

        :return: The supplier_code of this Product.
        :rtype: str
        """
        return self._supplier_code

    @supplier_code.setter
    def supplier_code(self, supplier_code):
        """
        Sets the supplier_code of this Product.
        Supplier code.

        :param supplier_code: The supplier_code of this Product.
        :type: str
        """

        self._supplier_code = supplier_code

    @property
    def supply_price(self):
        """
        Gets the supply_price of this Product.
        Default supply price,

        :return: The supply_price of this Product.
        :rtype: float
        """
        return self._supply_price

    @supply_price.setter
    def supply_price(self, supply_price):
        """
        Sets the supply_price of this Product.
        Default supply price,

        :param supply_price: The supply_price of this Product.
        :type: float
        """

        self._supply_price = supply_price

    @property
    def type(self):
        """
        Gets the type of this Product.

        :return: The type of this Product.
        :rtype: ProductTypeSample
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Product.

        :param type: The type of this Product.
        :type: ProductTypeSample
        """

        self._type = type

    @property
    def supplier(self):
        """
        Gets the supplier of this Product.

        :return: The supplier of this Product.
        :rtype: SupplierSample
        """
        return self._supplier

    @supplier.setter
    def supplier(self, supplier):
        """
        Sets the supplier of this Product.

        :param supplier: The supplier of this Product.
        :type: SupplierSample
        """

        self._supplier = supplier

    @property
    def brand(self):
        """
        Gets the brand of this Product.

        :return: The brand of this Product.
        :rtype: BrandSample
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """
        Sets the brand of this Product.

        :param brand: The brand of this Product.
        :type: BrandSample
        """

        self._brand = brand

    @property
    def variant_options(self):
        """
        Gets the variant_options of this Product.
        A list of variant option objects.

        :return: The variant_options of this Product.
        :rtype: list[VariantOption]
        """
        return self._variant_options

    @variant_options.setter
    def variant_options(self, variant_options):
        """
        Sets the variant_options of this Product.
        A list of variant option objects.

        :param variant_options: The variant_options of this Product.
        :type: list[VariantOption]
        """

        self._variant_options = variant_options

    @property
    def categories(self):
        """
        Gets the categories of this Product.
        A list of tag objects.

        :return: The categories of this Product.
        :rtype: list[Tag]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this Product.
        A list of tag objects.

        :param categories: The categories of this Product.
        :type: list[Tag]
        """

        self._categories = categories

    @property
    def image_url(self):
        """
        Gets the image_url of this Product.
        

        :return: The image_url of this Product.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """
        Sets the image_url of this Product.
        

        :param image_url: The image_url of this Product.
        :type: str
        """

        self._image_url = image_url

    @property
    def image_thumbnail_url(self):
        """
        Gets the image_thumbnail_url of this Product.
        

        :return: The image_thumbnail_url of this Product.
        :rtype: str
        """
        return self._image_thumbnail_url

    @image_thumbnail_url.setter
    def image_thumbnail_url(self, image_thumbnail_url):
        """
        Sets the image_thumbnail_url of this Product.
        

        :param image_thumbnail_url: The image_thumbnail_url of this Product.
        :type: str
        """

        self._image_thumbnail_url = image_thumbnail_url

    @property
    def images(self):
        """
        Gets the images of this Product.
        A list of image objects.

        :return: The images of this Product.
        :rtype: list[ImageSample]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this Product.
        A list of image objects.

        :param images: The images of this Product.
        :type: list[ImageSample]
        """

        self._images = images

    @property
    def created_at(self):
        """
        Gets the created_at of this Product.
        Creation timestamp in UTC.

        :return: The created_at of this Product.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this Product.
        Creation timestamp in UTC.

        :param created_at: The created_at of this Product.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this Product.
        Last update timestamp in UTC.

        :return: The updated_at of this Product.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this Product.
        Last update timestamp in UTC.

        :param updated_at: The updated_at of this Product.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this Product.
        Deletion timestamp in UTC.

        :return: The deleted_at of this Product.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this Product.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this Product.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def version(self):
        """
        Gets the version of this Product.
        Auto-incrementing object version number.

        :return: The version of this Product.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Product.
        Auto-incrementing object version number.

        :param version: The version of this Product.
        :type: int
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Product):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
