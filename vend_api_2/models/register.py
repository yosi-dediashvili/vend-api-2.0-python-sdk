# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Register(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'outlet_id': 'str',
        'ask_for_note_on_save': 'float',
        'print_note_on_receipt': 'bool',
        'ask_for_user_on_sale': 'bool',
        'show_discounts_on_receipts': 'bool',
        'print_receipt': 'bool',
        'email_receipt': 'bool',
        'invoice_prefix': 'str',
        'invoice_suffix': 'str',
        'invoice_sequence': 'float',
        'button_layout_id': 'str',
        'is_open': 'bool',
        'register_open_time': 'str',
        'register_close_time': 'str',
        'register_open_sequence_id': 'str',
        'cash_managed_payment_type_id': 'str',
        'deleted_at': 'str',
        'version': 'float'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'outlet_id': 'outlet_id',
        'ask_for_note_on_save': 'ask_for_note_on_save',
        'print_note_on_receipt': 'print_note_on_receipt',
        'ask_for_user_on_sale': 'ask_for_user_on_sale',
        'show_discounts_on_receipts': 'show_discounts_on_receipts',
        'print_receipt': 'print_receipt',
        'email_receipt': 'email_receipt',
        'invoice_prefix': 'invoice_prefix',
        'invoice_suffix': 'invoice_suffix',
        'invoice_sequence': 'invoice_sequence',
        'button_layout_id': 'button_layout_id',
        'is_open': 'is_open',
        'register_open_time': 'register_open_time',
        'register_close_time': 'register_close_time',
        'register_open_sequence_id': 'register_open_sequence_id',
        'cash_managed_payment_type_id': 'cash_managed_payment_type_id',
        'deleted_at': 'deleted_at',
        'version': 'version'
    }

    def __init__(self, id=None, name=None, outlet_id=None, ask_for_note_on_save=None, print_note_on_receipt=None, ask_for_user_on_sale=None, show_discounts_on_receipts=None, print_receipt=None, email_receipt=None, invoice_prefix=None, invoice_suffix=None, invoice_sequence=None, button_layout_id=None, is_open=None, register_open_time=None, register_close_time=None, register_open_sequence_id=None, cash_managed_payment_type_id=None, deleted_at=None, version=None):
        """
        Register - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._outlet_id = None
        self._ask_for_note_on_save = None
        self._print_note_on_receipt = None
        self._ask_for_user_on_sale = None
        self._show_discounts_on_receipts = None
        self._print_receipt = None
        self._email_receipt = None
        self._invoice_prefix = None
        self._invoice_suffix = None
        self._invoice_sequence = None
        self._button_layout_id = None
        self._is_open = None
        self._register_open_time = None
        self._register_close_time = None
        self._register_open_sequence_id = None
        self._cash_managed_payment_type_id = None
        self._deleted_at = None
        self._version = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if outlet_id is not None:
          self.outlet_id = outlet_id
        if ask_for_note_on_save is not None:
          self.ask_for_note_on_save = ask_for_note_on_save
        if print_note_on_receipt is not None:
          self.print_note_on_receipt = print_note_on_receipt
        if ask_for_user_on_sale is not None:
          self.ask_for_user_on_sale = ask_for_user_on_sale
        if show_discounts_on_receipts is not None:
          self.show_discounts_on_receipts = show_discounts_on_receipts
        if print_receipt is not None:
          self.print_receipt = print_receipt
        if email_receipt is not None:
          self.email_receipt = email_receipt
        if invoice_prefix is not None:
          self.invoice_prefix = invoice_prefix
        if invoice_suffix is not None:
          self.invoice_suffix = invoice_suffix
        if invoice_sequence is not None:
          self.invoice_sequence = invoice_sequence
        if button_layout_id is not None:
          self.button_layout_id = button_layout_id
        if is_open is not None:
          self.is_open = is_open
        if register_open_time is not None:
          self.register_open_time = register_open_time
        if register_close_time is not None:
          self.register_close_time = register_close_time
        if register_open_sequence_id is not None:
          self.register_open_sequence_id = register_open_sequence_id
        if cash_managed_payment_type_id is not None:
          self.cash_managed_payment_type_id = cash_managed_payment_type_id
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if version is not None:
          self.version = version

    @property
    def id(self):
        """
        Gets the id of this Register.
        Auto-generated object ID.

        :return: The id of this Register.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Register.
        Auto-generated object ID.

        :param id: The id of this Register.
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Register.
        The Register name.

        :return: The name of this Register.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Register.
        The Register name.

        :param name: The name of this Register.
        :type: str
        """

        self._name = name

    @property
    def outlet_id(self):
        """
        Gets the outlet_id of this Register.
        A valid ID of an Outlet that this register is associated with.

        :return: The outlet_id of this Register.
        :rtype: str
        """
        return self._outlet_id

    @outlet_id.setter
    def outlet_id(self, outlet_id):
        """
        Sets the outlet_id of this Register.
        A valid ID of an Outlet that this register is associated with.

        :param outlet_id: The outlet_id of this Register.
        :type: str
        """

        self._outlet_id = outlet_id

    @property
    def ask_for_note_on_save(self):
        """
        Gets the ask_for_note_on_save of this Register.
        `0` for **Never**, `1` for **On Save/Layby/Account/Return**, `2` for **Always**.

        :return: The ask_for_note_on_save of this Register.
        :rtype: float
        """
        return self._ask_for_note_on_save

    @ask_for_note_on_save.setter
    def ask_for_note_on_save(self, ask_for_note_on_save):
        """
        Sets the ask_for_note_on_save of this Register.
        `0` for **Never**, `1` for **On Save/Layby/Account/Return**, `2` for **Always**.

        :param ask_for_note_on_save: The ask_for_note_on_save of this Register.
        :type: float
        """

        self._ask_for_note_on_save = ask_for_note_on_save

    @property
    def print_note_on_receipt(self):
        """
        Gets the print_note_on_receipt of this Register.
        

        :return: The print_note_on_receipt of this Register.
        :rtype: bool
        """
        return self._print_note_on_receipt

    @print_note_on_receipt.setter
    def print_note_on_receipt(self, print_note_on_receipt):
        """
        Sets the print_note_on_receipt of this Register.
        

        :param print_note_on_receipt: The print_note_on_receipt of this Register.
        :type: bool
        """

        self._print_note_on_receipt = print_note_on_receipt

    @property
    def ask_for_user_on_sale(self):
        """
        Gets the ask_for_user_on_sale of this Register.
        

        :return: The ask_for_user_on_sale of this Register.
        :rtype: bool
        """
        return self._ask_for_user_on_sale

    @ask_for_user_on_sale.setter
    def ask_for_user_on_sale(self, ask_for_user_on_sale):
        """
        Sets the ask_for_user_on_sale of this Register.
        

        :param ask_for_user_on_sale: The ask_for_user_on_sale of this Register.
        :type: bool
        """

        self._ask_for_user_on_sale = ask_for_user_on_sale

    @property
    def show_discounts_on_receipts(self):
        """
        Gets the show_discounts_on_receipts of this Register.
        

        :return: The show_discounts_on_receipts of this Register.
        :rtype: bool
        """
        return self._show_discounts_on_receipts

    @show_discounts_on_receipts.setter
    def show_discounts_on_receipts(self, show_discounts_on_receipts):
        """
        Sets the show_discounts_on_receipts of this Register.
        

        :param show_discounts_on_receipts: The show_discounts_on_receipts of this Register.
        :type: bool
        """

        self._show_discounts_on_receipts = show_discounts_on_receipts

    @property
    def print_receipt(self):
        """
        Gets the print_receipt of this Register.
        Indicates whether a receipt should be printed after a sale.

        :return: The print_receipt of this Register.
        :rtype: bool
        """
        return self._print_receipt

    @print_receipt.setter
    def print_receipt(self, print_receipt):
        """
        Sets the print_receipt of this Register.
        Indicates whether a receipt should be printed after a sale.

        :param print_receipt: The print_receipt of this Register.
        :type: bool
        """

        self._print_receipt = print_receipt

    @property
    def email_receipt(self):
        """
        Gets the email_receipt of this Register.
        Indicates whether a receipt should be emailed after a sale.

        :return: The email_receipt of this Register.
        :rtype: bool
        """
        return self._email_receipt

    @email_receipt.setter
    def email_receipt(self, email_receipt):
        """
        Sets the email_receipt of this Register.
        Indicates whether a receipt should be emailed after a sale.

        :param email_receipt: The email_receipt of this Register.
        :type: bool
        """

        self._email_receipt = email_receipt

    @property
    def invoice_prefix(self):
        """
        Gets the invoice_prefix of this Register.
        Invoice number prefix.

        :return: The invoice_prefix of this Register.
        :rtype: str
        """
        return self._invoice_prefix

    @invoice_prefix.setter
    def invoice_prefix(self, invoice_prefix):
        """
        Sets the invoice_prefix of this Register.
        Invoice number prefix.

        :param invoice_prefix: The invoice_prefix of this Register.
        :type: str
        """

        self._invoice_prefix = invoice_prefix

    @property
    def invoice_suffix(self):
        """
        Gets the invoice_suffix of this Register.
        Invoice number suffix.

        :return: The invoice_suffix of this Register.
        :rtype: str
        """
        return self._invoice_suffix

    @invoice_suffix.setter
    def invoice_suffix(self, invoice_suffix):
        """
        Sets the invoice_suffix of this Register.
        Invoice number suffix.

        :param invoice_suffix: The invoice_suffix of this Register.
        :type: str
        """

        self._invoice_suffix = invoice_suffix

    @property
    def invoice_sequence(self):
        """
        Gets the invoice_sequence of this Register.
        The numeric part of the last issued invoice.

        :return: The invoice_sequence of this Register.
        :rtype: float
        """
        return self._invoice_sequence

    @invoice_sequence.setter
    def invoice_sequence(self, invoice_sequence):
        """
        Sets the invoice_sequence of this Register.
        The numeric part of the last issued invoice.

        :param invoice_sequence: The invoice_sequence of this Register.
        :type: float
        """

        self._invoice_sequence = invoice_sequence

    @property
    def button_layout_id(self):
        """
        Gets the button_layout_id of this Register.
        Register ID.

        :return: The button_layout_id of this Register.
        :rtype: str
        """
        return self._button_layout_id

    @button_layout_id.setter
    def button_layout_id(self, button_layout_id):
        """
        Sets the button_layout_id of this Register.
        Register ID.

        :param button_layout_id: The button_layout_id of this Register.
        :type: str
        """

        self._button_layout_id = button_layout_id

    @property
    def is_open(self):
        """
        Gets the is_open of this Register.
        Indicates if the Register is currently open.

        :return: The is_open of this Register.
        :rtype: bool
        """
        return self._is_open

    @is_open.setter
    def is_open(self, is_open):
        """
        Sets the is_open of this Register.
        Indicates if the Register is currently open.

        :param is_open: The is_open of this Register.
        :type: bool
        """

        self._is_open = is_open

    @property
    def register_open_time(self):
        """
        Gets the register_open_time of this Register.
        Date/time when the register was open. Always in UTC.

        :return: The register_open_time of this Register.
        :rtype: str
        """
        return self._register_open_time

    @register_open_time.setter
    def register_open_time(self, register_open_time):
        """
        Sets the register_open_time of this Register.
        Date/time when the register was open. Always in UTC.

        :param register_open_time: The register_open_time of this Register.
        :type: str
        """

        self._register_open_time = register_open_time

    @property
    def register_close_time(self):
        """
        Gets the register_close_time of this Register.
        Date/time when the register was closed. Null if currently open.

        :return: The register_close_time of this Register.
        :rtype: str
        """
        return self._register_close_time

    @register_close_time.setter
    def register_close_time(self, register_close_time):
        """
        Sets the register_close_time of this Register.
        Date/time when the register was closed. Null if currently open.

        :param register_close_time: The register_close_time of this Register.
        :type: str
        """

        self._register_close_time = register_close_time

    @property
    def register_open_sequence_id(self):
        """
        Gets the register_open_sequence_id of this Register.
        **internal** The ID of the current register closure object.

        :return: The register_open_sequence_id of this Register.
        :rtype: str
        """
        return self._register_open_sequence_id

    @register_open_sequence_id.setter
    def register_open_sequence_id(self, register_open_sequence_id):
        """
        Sets the register_open_sequence_id of this Register.
        **internal** The ID of the current register closure object.

        :param register_open_sequence_id: The register_open_sequence_id of this Register.
        :type: str
        """

        self._register_open_sequence_id = register_open_sequence_id

    @property
    def cash_managed_payment_type_id(self):
        """
        Gets the cash_managed_payment_type_id of this Register.
        **internal** The ID of the payment type used for cash management transactions in this regsiter.

        :return: The cash_managed_payment_type_id of this Register.
        :rtype: str
        """
        return self._cash_managed_payment_type_id

    @cash_managed_payment_type_id.setter
    def cash_managed_payment_type_id(self, cash_managed_payment_type_id):
        """
        Sets the cash_managed_payment_type_id of this Register.
        **internal** The ID of the payment type used for cash management transactions in this regsiter.

        :param cash_managed_payment_type_id: The cash_managed_payment_type_id of this Register.
        :type: str
        """

        self._cash_managed_payment_type_id = cash_managed_payment_type_id

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this Register.
        Deletion timestamp in UTC.

        :return: The deleted_at of this Register.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this Register.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this Register.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def version(self):
        """
        Gets the version of this Register.
        Auto-incrementing object version number.

        :return: The version of this Register.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Register.
        Auto-incrementing object version number.

        :param version: The version of this Register.
        :type: float
        """

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Register):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
