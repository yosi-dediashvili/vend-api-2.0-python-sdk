# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class InventoryCountItem(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'product_sku': 'str',
        'count': 'str',
        'received': 'str',
        'cost': 'str',
        'is_included': 'bool',
        'status': 'str',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str',
        'version': 'int'
    }

    attribute_map = {
        'product_id': 'product_id',
        'product_sku': 'product_sku',
        'count': 'count',
        'received': 'received',
        'cost': 'cost',
        'is_included': 'is_included',
        'status': 'status',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at',
        'version': 'version'
    }

    def __init__(self, product_id=None, product_sku=None, count=None, received=None, cost=None, is_included=None, status=None, created_at=None, updated_at=None, deleted_at=None, version=None):
        """
        InventoryCountItem - a model defined in Swagger
        """

        self._product_id = None
        self._product_sku = None
        self._count = None
        self._received = None
        self._cost = None
        self._is_included = None
        self._status = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self._version = None
        self.discriminator = None

        self.product_id = product_id
        if product_sku is not None:
          self.product_sku = product_sku
        self.count = count
        self.received = received
        self.cost = cost
        if is_included is not None:
          self.is_included = is_included
        self.status = status
        self.created_at = created_at
        self.updated_at = updated_at
        self.deleted_at = deleted_at
        self.version = version

    @property
    def product_id(self):
        """
        Gets the product_id of this InventoryCountItem.
        The ID of the product associated with this count item.

        :return: The product_id of this InventoryCountItem.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this InventoryCountItem.
        The ID of the product associated with this count item.

        :param product_id: The product_id of this InventoryCountItem.
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def product_sku(self):
        """
        Gets the product_sku of this InventoryCountItem.

        :return: The product_sku of this InventoryCountItem.
        :rtype: str
        """
        return self._product_sku

    @product_sku.setter
    def product_sku(self, product_sku):
        """
        Sets the product_sku of this InventoryCountItem.

        :param product_sku: The product_sku of this InventoryCountItem.
        :type: str
        """

        self._product_sku = product_sku

    @property
    def count(self):
        """
        Gets the count of this InventoryCountItem.
        Expected item count.

        :return: The count of this InventoryCountItem.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this InventoryCountItem.
        Expected item count.

        :param count: The count of this InventoryCountItem.
        :type: str
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def received(self):
        """
        Gets the received of this InventoryCountItem.
        Observed item count.

        :return: The received of this InventoryCountItem.
        :rtype: str
        """
        return self._received

    @received.setter
    def received(self, received):
        """
        Sets the received of this InventoryCountItem.
        Observed item count.

        :param received: The received of this InventoryCountItem.
        :type: str
        """
        if received is None:
            raise ValueError("Invalid value for `received`, must not be `None`")

        self._received = received

    @property
    def cost(self):
        """
        Gets the cost of this InventoryCountItem.
        The cost of the item.

        :return: The cost of this InventoryCountItem.
        :rtype: str
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """
        Sets the cost of this InventoryCountItem.
        The cost of the item.

        :param cost: The cost of this InventoryCountItem.
        :type: str
        """
        if cost is None:
            raise ValueError("Invalid value for `cost`, must not be `None`")

        self._cost = cost

    @property
    def is_included(self):
        """
        Gets the is_included of this InventoryCountItem.
        Indicated whether the item was included via a filter. Can be `null`. For full count (no filters) always `true`.

        :return: The is_included of this InventoryCountItem.
        :rtype: bool
        """
        return self._is_included

    @is_included.setter
    def is_included(self, is_included):
        """
        Sets the is_included of this InventoryCountItem.
        Indicated whether the item was included via a filter. Can be `null`. For full count (no filters) always `true`.

        :param is_included: The is_included of this InventoryCountItem.
        :type: bool
        """

        self._is_included = is_included

    @property
    def status(self):
        """
        Gets the status of this InventoryCountItem.
        The status of the item. One of: `PENDING`, `SUCCESS`.

        :return: The status of this InventoryCountItem.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this InventoryCountItem.
        The status of the item. One of: `PENDING`, `SUCCESS`.

        :param status: The status of this InventoryCountItem.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    @property
    def created_at(self):
        """
        Gets the created_at of this InventoryCountItem.
        The creation timestamp in UTC.

        :return: The created_at of this InventoryCountItem.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this InventoryCountItem.
        The creation timestamp in UTC.

        :param created_at: The created_at of this InventoryCountItem.
        :type: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this InventoryCountItem.
        Last update timestamp in UTC.

        :return: The updated_at of this InventoryCountItem.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this InventoryCountItem.
        Last update timestamp in UTC.

        :param updated_at: The updated_at of this InventoryCountItem.
        :type: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this InventoryCountItem.
        The deletion timestamp in UTC.

        :return: The deleted_at of this InventoryCountItem.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this InventoryCountItem.
        The deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this InventoryCountItem.
        :type: str
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")

        self._deleted_at = deleted_at

    @property
    def version(self):
        """
        Gets the version of this InventoryCountItem.
        Auto-incrementing object version number.

        :return: The version of this InventoryCountItem.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this InventoryCountItem.
        Auto-incrementing object version number.

        :param version: The version of this InventoryCountItem.
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, InventoryCountItem):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
