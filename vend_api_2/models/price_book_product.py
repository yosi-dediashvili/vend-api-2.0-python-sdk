# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PriceBookProduct(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'str',
        'price_book_id': 'str',
        'id': 'str',
        'price': 'float',
        'loyalty_value': 'float',
        'min_units': 'float',
        'max_units': 'float',
        'created_at': 'str',
        'updated_at': 'str',
        'deleted_at': 'str'
    }

    attribute_map = {
        'product_id': 'product_id',
        'price_book_id': 'price_book_id',
        'id': 'id',
        'price': 'price',
        'loyalty_value': 'loyalty_value',
        'min_units': 'min_units',
        'max_units': 'max_units',
        'created_at': 'created_at',
        'updated_at': 'updated_at',
        'deleted_at': 'deleted_at'
    }

    def __init__(self, product_id=None, price_book_id=None, id=None, price=None, loyalty_value=None, min_units=None, max_units=None, created_at=None, updated_at=None, deleted_at=None):
        """
        PriceBookProduct - a model defined in Swagger
        """

        self._product_id = None
        self._price_book_id = None
        self._id = None
        self._price = None
        self._loyalty_value = None
        self._min_units = None
        self._max_units = None
        self._created_at = None
        self._updated_at = None
        self._deleted_at = None
        self.discriminator = None

        self.product_id = product_id
        self.price_book_id = price_book_id
        if id is not None:
          self.id = id
        if price is not None:
          self.price = price
        if loyalty_value is not None:
          self.loyalty_value = loyalty_value
        if min_units is not None:
          self.min_units = min_units
        if max_units is not None:
          self.max_units = max_units
        if created_at is not None:
          self.created_at = created_at
        if updated_at is not None:
          self.updated_at = updated_at
        if deleted_at is not None:
          self.deleted_at = deleted_at

    @property
    def product_id(self):
        """
        Gets the product_id of this PriceBookProduct.
        The ID of the associated product.

        :return: The product_id of this PriceBookProduct.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this PriceBookProduct.
        The ID of the associated product.

        :param product_id: The product_id of this PriceBookProduct.
        :type: str
        """
        if product_id is None:
            raise ValueError("Invalid value for `product_id`, must not be `None`")

        self._product_id = product_id

    @property
    def price_book_id(self):
        """
        Gets the price_book_id of this PriceBookProduct.
        The ID of the price book this product belongs to.

        :return: The price_book_id of this PriceBookProduct.
        :rtype: str
        """
        return self._price_book_id

    @price_book_id.setter
    def price_book_id(self, price_book_id):
        """
        Sets the price_book_id of this PriceBookProduct.
        The ID of the price book this product belongs to.

        :param price_book_id: The price_book_id of this PriceBookProduct.
        :type: str
        """
        if price_book_id is None:
            raise ValueError("Invalid value for `price_book_id`, must not be `None`")

        self._price_book_id = price_book_id

    @property
    def id(self):
        """
        Gets the id of this PriceBookProduct.
        Auto-generated object ID.

        :return: The id of this PriceBookProduct.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this PriceBookProduct.
        Auto-generated object ID.

        :param id: The id of this PriceBookProduct.
        :type: str
        """

        self._id = id

    @property
    def price(self):
        """
        Gets the price of this PriceBookProduct.
        Retail price.

        :return: The price of this PriceBookProduct.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this PriceBookProduct.
        Retail price.

        :param price: The price of this PriceBookProduct.
        :type: float
        """

        self._price = price

    @property
    def loyalty_value(self):
        """
        Gets the loyalty_value of this PriceBookProduct.
        Price book defined loyalty value.

        :return: The loyalty_value of this PriceBookProduct.
        :rtype: float
        """
        return self._loyalty_value

    @loyalty_value.setter
    def loyalty_value(self, loyalty_value):
        """
        Sets the loyalty_value of this PriceBookProduct.
        Price book defined loyalty value.

        :param loyalty_value: The loyalty_value of this PriceBookProduct.
        :type: float
        """

        self._loyalty_value = loyalty_value

    @property
    def min_units(self):
        """
        Gets the min_units of this PriceBookProduct.
        The minimum number of items for which this price will be used.

        :return: The min_units of this PriceBookProduct.
        :rtype: float
        """
        return self._min_units

    @min_units.setter
    def min_units(self, min_units):
        """
        Sets the min_units of this PriceBookProduct.
        The minimum number of items for which this price will be used.

        :param min_units: The min_units of this PriceBookProduct.
        :type: float
        """

        self._min_units = min_units

    @property
    def max_units(self):
        """
        Gets the max_units of this PriceBookProduct.
        The maximum number of items for which this price will be used.+ version: 1288421 (number) - Auto-incrementing object version number.

        :return: The max_units of this PriceBookProduct.
        :rtype: float
        """
        return self._max_units

    @max_units.setter
    def max_units(self, max_units):
        """
        Sets the max_units of this PriceBookProduct.
        The maximum number of items for which this price will be used.+ version: 1288421 (number) - Auto-incrementing object version number.

        :param max_units: The max_units of this PriceBookProduct.
        :type: float
        """

        self._max_units = max_units

    @property
    def created_at(self):
        """
        Gets the created_at of this PriceBookProduct.
        Creation timestamp in UTC.

        :return: The created_at of this PriceBookProduct.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """
        Sets the created_at of this PriceBookProduct.
        Creation timestamp in UTC.

        :param created_at: The created_at of this PriceBookProduct.
        :type: str
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """
        Gets the updated_at of this PriceBookProduct.
        Last update timestamp in UTC.

        :return: The updated_at of this PriceBookProduct.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """
        Sets the updated_at of this PriceBookProduct.
        Last update timestamp in UTC.

        :param updated_at: The updated_at of this PriceBookProduct.
        :type: str
        """

        self._updated_at = updated_at

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this PriceBookProduct.
        Deletion timestamp in UTC.

        :return: The deleted_at of this PriceBookProduct.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this PriceBookProduct.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this PriceBookProduct.
        :type: str
        """

        self._deleted_at = deleted_at

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PriceBookProduct):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
