# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Sale(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outlet_id': 'str',
        'return_for': 'str',
        'total_price': 'float',
        'total_tax': 'float',
        'deleted_at': 'str',
        'version': 'float',
        'taxes': 'list[SaleTax]',
        'register_id': 'str',
        'user_id': 'str',
        'status': 'str',
        'line_items': 'list[LineItem]',
        'payments': 'list[Payment]',
        'customer_id': 'str',
        'invoice_number': 'str',
        'invoice_sequence': 'float',
        'note': 'str',
        'short_code': 'str',
        'sale_date': 'str'
    }

    attribute_map = {
        'outlet_id': 'outlet_id',
        'return_for': 'return_for',
        'total_price': 'total_price',
        'total_tax': 'total_tax',
        'deleted_at': 'deleted_at',
        'version': 'version',
        'taxes': 'taxes',
        'register_id': 'register_id',
        'user_id': 'user_id',
        'status': 'status',
        'line_items': 'line_items',
        'payments': 'payments',
        'customer_id': 'customer_id',
        'invoice_number': 'invoice_number',
        'invoice_sequence': 'invoice_sequence',
        'note': 'note',
        'short_code': 'short_code',
        'sale_date': 'sale_date'
    }

    def __init__(self, outlet_id=None, return_for=None, total_price=None, total_tax=None, deleted_at=None, version=None, taxes=None, register_id=None, user_id=None, status=None, line_items=None, payments=None, customer_id=None, invoice_number=None, invoice_sequence=None, note=None, short_code=None, sale_date=None):
        """
        Sale - a model defined in Swagger
        """

        self._outlet_id = None
        self._return_for = None
        self._total_price = None
        self._total_tax = None
        self._deleted_at = None
        self._version = None
        self._taxes = None
        self._register_id = None
        self._user_id = None
        self._status = None
        self._line_items = None
        self._payments = None
        self._customer_id = None
        self._invoice_number = None
        self._invoice_sequence = None
        self._note = None
        self._short_code = None
        self._sale_date = None
        self.discriminator = None

        if outlet_id is not None:
          self.outlet_id = outlet_id
        if return_for is not None:
          self.return_for = return_for
        if total_price is not None:
          self.total_price = total_price
        if total_tax is not None:
          self.total_tax = total_tax
        if deleted_at is not None:
          self.deleted_at = deleted_at
        if version is not None:
          self.version = version
        if taxes is not None:
          self.taxes = taxes
        if register_id is not None:
          self.register_id = register_id
        if user_id is not None:
          self.user_id = user_id
        if status is not None:
          self.status = status
        if line_items is not None:
          self.line_items = line_items
        if payments is not None:
          self.payments = payments
        if customer_id is not None:
          self.customer_id = customer_id
        if invoice_number is not None:
          self.invoice_number = invoice_number
        if invoice_sequence is not None:
          self.invoice_sequence = invoice_sequence
        if note is not None:
          self.note = note
        if short_code is not None:
          self.short_code = short_code
        if sale_date is not None:
          self.sale_date = sale_date

    @property
    def outlet_id(self):
        """
        Gets the outlet_id of this Sale.
        Valid outlet ID for the retailer.

        :return: The outlet_id of this Sale.
        :rtype: str
        """
        return self._outlet_id

    @outlet_id.setter
    def outlet_id(self, outlet_id):
        """
        Sets the outlet_id of this Sale.
        Valid outlet ID for the retailer.

        :param outlet_id: The outlet_id of this Sale.
        :type: str
        """

        self._outlet_id = outlet_id

    @property
    def return_for(self):
        """
        Gets the return_for of this Sale.
        Reference ID to a different sale if this sale was created as a return.

        :return: The return_for of this Sale.
        :rtype: str
        """
        return self._return_for

    @return_for.setter
    def return_for(self, return_for):
        """
        Sets the return_for of this Sale.
        Reference ID to a different sale if this sale was created as a return.

        :param return_for: The return_for of this Sale.
        :type: str
        """

        self._return_for = return_for

    @property
    def total_price(self):
        """
        Gets the total_price of this Sale.
        Sale total.

        :return: The total_price of this Sale.
        :rtype: float
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this Sale.
        Sale total.

        :param total_price: The total_price of this Sale.
        :type: float
        """

        self._total_price = total_price

    @property
    def total_tax(self):
        """
        Gets the total_tax of this Sale.
        Tax total.

        :return: The total_tax of this Sale.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """
        Sets the total_tax of this Sale.
        Tax total.

        :param total_tax: The total_tax of this Sale.
        :type: float
        """

        self._total_tax = total_tax

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this Sale.
        Deletion timestamp in UTC.

        :return: The deleted_at of this Sale.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this Sale.
        Deletion timestamp in UTC.

        :param deleted_at: The deleted_at of this Sale.
        :type: str
        """

        self._deleted_at = deleted_at

    @property
    def version(self):
        """
        Gets the version of this Sale.
        Auto-incrementing object version number.

        :return: The version of this Sale.
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Sale.
        Auto-incrementing object version number.

        :param version: The version of this Sale.
        :type: float
        """

        self._version = version

    @property
    def taxes(self):
        """
        Gets the taxes of this Sale.
        Collection of taxes.

        :return: The taxes of this Sale.
        :rtype: list[SaleTax]
        """
        return self._taxes

    @taxes.setter
    def taxes(self, taxes):
        """
        Sets the taxes of this Sale.
        Collection of taxes.

        :param taxes: The taxes of this Sale.
        :type: list[SaleTax]
        """

        self._taxes = taxes

    @property
    def register_id(self):
        """
        Gets the register_id of this Sale.
        Valid register ID for the retailer.

        :return: The register_id of this Sale.
        :rtype: str
        """
        return self._register_id

    @register_id.setter
    def register_id(self, register_id):
        """
        Sets the register_id of this Sale.
        Valid register ID for the retailer.

        :param register_id: The register_id of this Sale.
        :type: str
        """

        self._register_id = register_id

    @property
    def user_id(self):
        """
        Gets the user_id of this Sale.
        Valid user ID for the retailer.

        :return: The user_id of this Sale.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """
        Sets the user_id of this Sale.
        Valid user ID for the retailer.

        :param user_id: The user_id of this Sale.
        :type: str
        """

        self._user_id = user_id

    @property
    def status(self):
        """
        Gets the status of this Sale.
        Sale status. One of: CLOSED, SAVED, ONACCOUNT, ONACCOUNT_CLOSED, LAYBY, LAYBY_CLOSED. VOIDED ???

        :return: The status of this Sale.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Sale.
        Sale status. One of: CLOSED, SAVED, ONACCOUNT, ONACCOUNT_CLOSED, LAYBY, LAYBY_CLOSED. VOIDED ???

        :param status: The status of this Sale.
        :type: str
        """

        self._status = status

    @property
    def line_items(self):
        """
        Gets the line_items of this Sale.
        A collection of line items.

        :return: The line_items of this Sale.
        :rtype: list[LineItem]
        """
        return self._line_items

    @line_items.setter
    def line_items(self, line_items):
        """
        Sets the line_items of this Sale.
        A collection of line items.

        :param line_items: The line_items of this Sale.
        :type: list[LineItem]
        """

        self._line_items = line_items

    @property
    def payments(self):
        """
        Gets the payments of this Sale.
        Collection of payments.

        :return: The payments of this Sale.
        :rtype: list[Payment]
        """
        return self._payments

    @payments.setter
    def payments(self, payments):
        """
        Sets the payments of this Sale.
        Collection of payments.

        :param payments: The payments of this Sale.
        :type: list[Payment]
        """

        self._payments = payments

    @property
    def customer_id(self):
        """
        Gets the customer_id of this Sale.
        Valid customer ID for the retailer.

        :return: The customer_id of this Sale.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """
        Sets the customer_id of this Sale.
        Valid customer ID for the retailer.

        :param customer_id: The customer_id of this Sale.
        :type: str
        """

        self._customer_id = customer_id

    @property
    def invoice_number(self):
        """
        Gets the invoice_number of this Sale.
        Invoice number which if provided, should use the prefix and suffix defined for the register.

        :return: The invoice_number of this Sale.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """
        Sets the invoice_number of this Sale.
        Invoice number which if provided, should use the prefix and suffix defined for the register.

        :param invoice_number: The invoice_number of this Sale.
        :type: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_sequence(self):
        """
        Gets the invoice_sequence of this Sale.
        Optionally provided value.

        :return: The invoice_sequence of this Sale.
        :rtype: float
        """
        return self._invoice_sequence

    @invoice_sequence.setter
    def invoice_sequence(self, invoice_sequence):
        """
        Sets the invoice_sequence of this Sale.
        Optionally provided value.

        :param invoice_sequence: The invoice_sequence of this Sale.
        :type: float
        """

        self._invoice_sequence = invoice_sequence

    @property
    def note(self):
        """
        Gets the note of this Sale.
        Sale Note.

        :return: The note of this Sale.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """
        Sets the note of this Sale.
        Sale Note.

        :param note: The note of this Sale.
        :type: str
        """

        self._note = note

    @property
    def short_code(self):
        """
        Gets the short_code of this Sale.
        6 character code used in the loyalty system. ???

        :return: The short_code of this Sale.
        :rtype: str
        """
        return self._short_code

    @short_code.setter
    def short_code(self, short_code):
        """
        Sets the short_code of this Sale.
        6 character code used in the loyalty system. ???

        :param short_code: The short_code of this Sale.
        :type: str
        """

        self._short_code = short_code

    @property
    def sale_date(self):
        """
        Gets the sale_date of this Sale.
        Sale timestamp in UTC.

        :return: The sale_date of this Sale.
        :rtype: str
        """
        return self._sale_date

    @sale_date.setter
    def sale_date(self, sale_date):
        """
        Sets the sale_date of this Sale.
        Sale timestamp in UTC.

        :param sale_date: The sale_date of this Sale.
        :type: str
        """

        self._sale_date = sale_date

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Sale):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
