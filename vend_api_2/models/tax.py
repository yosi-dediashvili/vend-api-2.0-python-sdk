# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Tax(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'version': 'int',
        'deleted_at': 'str',
        'rates': 'list[TaxRate]',
        'is_default': 'bool',
        'display_name': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'version': 'version',
        'deleted_at': 'deleted_at',
        'rates': 'rates',
        'is_default': 'is_default',
        'display_name': 'display_name'
    }

    def __init__(self, id=None, name=None, version=None, deleted_at=None, rates=None, is_default=None, display_name=None):
        """
        Tax - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._version = None
        self._deleted_at = None
        self._rates = None
        self._is_default = None
        self._display_name = None
        self.discriminator = None

        self.id = id
        if name is not None:
          self.name = name
        self.version = version
        self.deleted_at = deleted_at
        if rates is not None:
          self.rates = rates
        self.is_default = is_default
        self.display_name = display_name

    @property
    def id(self):
        """
        Gets the id of this Tax.
        Auto-generated object ID.

        :return: The id of this Tax.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Tax.
        Auto-generated object ID.

        :param id: The id of this Tax.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this Tax.
        The name of the tax.

        :return: The name of this Tax.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Tax.
        The name of the tax.

        :param name: The name of this Tax.
        :type: str
        """

        self._name = name

    @property
    def version(self):
        """
        Gets the version of this Tax.

        :return: The version of this Tax.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this Tax.

        :param version: The version of this Tax.
        :type: int
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")

        self._version = version

    @property
    def deleted_at(self):
        """
        Gets the deleted_at of this Tax.
        The deletion timestamp.

        :return: The deleted_at of this Tax.
        :rtype: str
        """
        return self._deleted_at

    @deleted_at.setter
    def deleted_at(self, deleted_at):
        """
        Sets the deleted_at of this Tax.
        The deletion timestamp.

        :param deleted_at: The deleted_at of this Tax.
        :type: str
        """
        if deleted_at is None:
            raise ValueError("Invalid value for `deleted_at`, must not be `None`")

        self._deleted_at = deleted_at

    @property
    def rates(self):
        """
        Gets the rates of this Tax.

        :return: The rates of this Tax.
        :rtype: list[TaxRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """
        Sets the rates of this Tax.

        :param rates: The rates of this Tax.
        :type: list[TaxRate]
        """

        self._rates = rates

    @property
    def is_default(self):
        """
        Gets the is_default of this Tax.
        Indicates whether the tax is used as the default one.

        :return: The is_default of this Tax.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default):
        """
        Sets the is_default of this Tax.
        Indicates whether the tax is used as the default one.

        :param is_default: The is_default of this Tax.
        :type: bool
        """
        if is_default is None:
            raise ValueError("Invalid value for `is_default`, must not be `None`")

        self._is_default = is_default

    @property
    def display_name(self):
        """
        Gets the display_name of this Tax.
        The name of the tax used for display.

        :return: The display_name of this Tax.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """
        Sets the display_name of this Tax.
        The name of the tax used for display.

        :param display_name: The display_name of this Tax.
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Tax):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
