# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class UserImages(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ss': 'str',
        'standard': 'str',
        'st': 'str',
        'original': 'str',
        'thumb': 'str',
        'sl': 'str',
        'sm': 'str'
    }

    attribute_map = {
        'ss': 'ss',
        'standard': 'standard',
        'st': 'st',
        'original': 'original',
        'thumb': 'thumb',
        'sl': 'sl',
        'sm': 'sm'
    }

    def __init__(self, ss=None, standard=None, st=None, original=None, thumb=None, sl=None, sm=None):
        """
        UserImages - a model defined in Swagger
        """

        self._ss = None
        self._standard = None
        self._st = None
        self._original = None
        self._thumb = None
        self._sl = None
        self._sm = None
        self.discriminator = None

        if ss is not None:
          self.ss = ss
        if standard is not None:
          self.standard = standard
        if st is not None:
          self.st = st
        if original is not None:
          self.original = original
        if thumb is not None:
          self.thumb = thumb
        if sl is not None:
          self.sl = sl
        if sm is not None:
          self.sm = sm

    @property
    def ss(self):
        """
        Gets the ss of this UserImages.

        :return: The ss of this UserImages.
        :rtype: str
        """
        return self._ss

    @ss.setter
    def ss(self, ss):
        """
        Sets the ss of this UserImages.

        :param ss: The ss of this UserImages.
        :type: str
        """

        self._ss = ss

    @property
    def standard(self):
        """
        Gets the standard of this UserImages.

        :return: The standard of this UserImages.
        :rtype: str
        """
        return self._standard

    @standard.setter
    def standard(self, standard):
        """
        Sets the standard of this UserImages.

        :param standard: The standard of this UserImages.
        :type: str
        """

        self._standard = standard

    @property
    def st(self):
        """
        Gets the st of this UserImages.

        :return: The st of this UserImages.
        :rtype: str
        """
        return self._st

    @st.setter
    def st(self, st):
        """
        Sets the st of this UserImages.

        :param st: The st of this UserImages.
        :type: str
        """

        self._st = st

    @property
    def original(self):
        """
        Gets the original of this UserImages.

        :return: The original of this UserImages.
        :rtype: str
        """
        return self._original

    @original.setter
    def original(self, original):
        """
        Sets the original of this UserImages.

        :param original: The original of this UserImages.
        :type: str
        """

        self._original = original

    @property
    def thumb(self):
        """
        Gets the thumb of this UserImages.

        :return: The thumb of this UserImages.
        :rtype: str
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb):
        """
        Sets the thumb of this UserImages.

        :param thumb: The thumb of this UserImages.
        :type: str
        """

        self._thumb = thumb

    @property
    def sl(self):
        """
        Gets the sl of this UserImages.

        :return: The sl of this UserImages.
        :rtype: str
        """
        return self._sl

    @sl.setter
    def sl(self, sl):
        """
        Sets the sl of this UserImages.

        :param sl: The sl of this UserImages.
        :type: str
        """

        self._sl = sl

    @property
    def sm(self):
        """
        Gets the sm of this UserImages.

        :return: The sm of this UserImages.
        :rtype: str
        """
        return self._sm

    @sm.setter
    def sm(self, sm):
        """
        Sets the sm of this UserImages.

        :param sm: The sm of this UserImages.
        :type: str
        """

        self._sm = sm

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, UserImages):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
