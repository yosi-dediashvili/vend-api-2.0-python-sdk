# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Payment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'register_id': 'str',
        'retailer_payment_type_id': 'str',
        'payment_type_id': 'str',
        'payment_date': 'str',
        'amount': 'float'
    }

    attribute_map = {
        'name': 'name',
        'register_id': 'register_id',
        'retailer_payment_type_id': 'retailer_payment_type_id',
        'payment_type_id': 'payment_type_id',
        'payment_date': 'payment_date',
        'amount': 'amount'
    }

    def __init__(self, name=None, register_id=None, retailer_payment_type_id=None, payment_type_id=None, payment_date=None, amount=None):
        """
        Payment - a model defined in Swagger
        """

        self._name = None
        self._register_id = None
        self._retailer_payment_type_id = None
        self._payment_type_id = None
        self._payment_date = None
        self._amount = None
        self.discriminator = None

        if name is not None:
          self.name = name
        if register_id is not None:
          self.register_id = register_id
        if retailer_payment_type_id is not None:
          self.retailer_payment_type_id = retailer_payment_type_id
        if payment_type_id is not None:
          self.payment_type_id = payment_type_id
        if payment_date is not None:
          self.payment_date = payment_date
        if amount is not None:
          self.amount = amount

    @property
    def name(self):
        """
        Gets the name of this Payment.
        Payment type name.

        :return: The name of this Payment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Payment.
        Payment type name.

        :param name: The name of this Payment.
        :type: str
        """

        self._name = name

    @property
    def register_id(self):
        """
        Gets the register_id of this Payment.
        A valid register ID.

        :return: The register_id of this Payment.
        :rtype: str
        """
        return self._register_id

    @register_id.setter
    def register_id(self, register_id):
        """
        Sets the register_id of this Payment.
        A valid register ID.

        :param register_id: The register_id of this Payment.
        :type: str
        """

        self._register_id = register_id

    @property
    def retailer_payment_type_id(self):
        """
        Gets the retailer_payment_type_id of this Payment.
        A valid retailer payment type ID.

        :return: The retailer_payment_type_id of this Payment.
        :rtype: str
        """
        return self._retailer_payment_type_id

    @retailer_payment_type_id.setter
    def retailer_payment_type_id(self, retailer_payment_type_id):
        """
        Sets the retailer_payment_type_id of this Payment.
        A valid retailer payment type ID.

        :param retailer_payment_type_id: The retailer_payment_type_id of this Payment.
        :type: str
        """

        self._retailer_payment_type_id = retailer_payment_type_id

    @property
    def payment_type_id(self):
        """
        Gets the payment_type_id of this Payment.
        A payment type associated with the retailer payment type. **deprecated** ???

        :return: The payment_type_id of this Payment.
        :rtype: str
        """
        return self._payment_type_id

    @payment_type_id.setter
    def payment_type_id(self, payment_type_id):
        """
        Sets the payment_type_id of this Payment.
        A payment type associated with the retailer payment type. **deprecated** ???

        :param payment_type_id: The payment_type_id of this Payment.
        :type: str
        """

        self._payment_type_id = payment_type_id

    @property
    def payment_date(self):
        """
        Gets the payment_date of this Payment.
        Payment date in UTC.

        :return: The payment_date of this Payment.
        :rtype: str
        """
        return self._payment_date

    @payment_date.setter
    def payment_date(self, payment_date):
        """
        Sets the payment_date of this Payment.
        Payment date in UTC.

        :param payment_date: The payment_date of this Payment.
        :type: str
        """

        self._payment_date = payment_date

    @property
    def amount(self):
        """
        Gets the amount of this Payment.
        Payment amount.

        :return: The amount of this Payment.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """
        Sets the amount of this Payment.
        Payment amount.

        :param amount: The amount of this Payment.
        :type: float
        """

        self._amount = amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Payment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
