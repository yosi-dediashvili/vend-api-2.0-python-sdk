# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Inventory(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'product_id': 'str',
        'outlet_id': 'str',
        'inventory_level': 'float',
        'reorder_point': 'float',
        'reorder_amount': 'float'
    }

    attribute_map = {
        'id': 'id',
        'product_id': 'product_id',
        'outlet_id': 'outlet_id',
        'inventory_level': 'inventory_level',
        'reorder_point': 'reorder_point',
        'reorder_amount': 'reorder_amount'
    }

    def __init__(self, id=None, product_id=None, outlet_id=None, inventory_level=None, reorder_point=None, reorder_amount=None):
        """
        Inventory - a model defined in Swagger
        """

        self._id = None
        self._product_id = None
        self._outlet_id = None
        self._inventory_level = None
        self._reorder_point = None
        self._reorder_amount = None
        self.discriminator = None

        if id is not None:
          self.id = id
        if product_id is not None:
          self.product_id = product_id
        if outlet_id is not None:
          self.outlet_id = outlet_id
        if inventory_level is not None:
          self.inventory_level = inventory_level
        if reorder_point is not None:
          self.reorder_point = reorder_point
        if reorder_amount is not None:
          self.reorder_amount = reorder_amount

    @property
    def id(self):
        """
        Gets the id of this Inventory.
        Auto-generated object ID.

        :return: The id of this Inventory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Inventory.
        Auto-generated object ID.

        :param id: The id of this Inventory.
        :type: str
        """

        self._id = id

    @property
    def product_id(self):
        """
        Gets the product_id of this Inventory.
        The ID of the product associated with this inventory record.

        :return: The product_id of this Inventory.
        :rtype: str
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """
        Sets the product_id of this Inventory.
        The ID of the product associated with this inventory record.

        :param product_id: The product_id of this Inventory.
        :type: str
        """

        self._product_id = product_id

    @property
    def outlet_id(self):
        """
        Gets the outlet_id of this Inventory.
        The ID of the outlet associated with this inventory record.

        :return: The outlet_id of this Inventory.
        :rtype: str
        """
        return self._outlet_id

    @outlet_id.setter
    def outlet_id(self, outlet_id):
        """
        Sets the outlet_id of this Inventory.
        The ID of the outlet associated with this inventory record.

        :param outlet_id: The outlet_id of this Inventory.
        :type: str
        """

        self._outlet_id = outlet_id

    @property
    def inventory_level(self):
        """
        Gets the inventory_level of this Inventory.
        Current inventory level.

        :return: The inventory_level of this Inventory.
        :rtype: float
        """
        return self._inventory_level

    @inventory_level.setter
    def inventory_level(self, inventory_level):
        """
        Sets the inventory_level of this Inventory.
        Current inventory level.

        :param inventory_level: The inventory_level of this Inventory.
        :type: float
        """

        self._inventory_level = inventory_level

    @property
    def reorder_point(self):
        """
        Gets the reorder_point of this Inventory.
        Level at which a product should be automatically included in stock orders.

        :return: The reorder_point of this Inventory.
        :rtype: float
        """
        return self._reorder_point

    @reorder_point.setter
    def reorder_point(self, reorder_point):
        """
        Sets the reorder_point of this Inventory.
        Level at which a product should be automatically included in stock orders.

        :param reorder_point: The reorder_point of this Inventory.
        :type: float
        """

        self._reorder_point = reorder_point

    @property
    def reorder_amount(self):
        """
        Gets the reorder_amount of this Inventory.
        Amount to be added to the automatic stock order.+ version: 1288421 (number) - Auto-incrementing object version number.

        :return: The reorder_amount of this Inventory.
        :rtype: float
        """
        return self._reorder_amount

    @reorder_amount.setter
    def reorder_amount(self, reorder_amount):
        """
        Sets the reorder_amount of this Inventory.
        Amount to be added to the automatic stock order.+ version: 1288421 (number) - Auto-incrementing object version number.

        :param reorder_amount: The reorder_amount of this Inventory.
        :type: float
        """

        self._reorder_amount = reorder_amount

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Inventory):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
