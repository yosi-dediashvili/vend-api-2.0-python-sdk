# coding: utf-8

"""
    API 2.0

    Early release of version 2.0 of the Vend API.

    OpenAPI spec version: 2.0
    Contact: api@vendhq.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LineItemTaxComponent(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rate_id': 'str',
        'total_tax': 'float'
    }

    attribute_map = {
        'rate_id': 'rate_id',
        'total_tax': 'total_tax'
    }

    def __init__(self, rate_id=None, total_tax=None):
        """
        LineItemTaxComponent - a model defined in Swagger
        """

        self._rate_id = None
        self._total_tax = None
        self.discriminator = None

        self.rate_id = rate_id
        self.total_tax = total_tax

    @property
    def rate_id(self):
        """
        Gets the rate_id of this LineItemTaxComponent.
        Tax rate ID.

        :return: The rate_id of this LineItemTaxComponent.
        :rtype: str
        """
        return self._rate_id

    @rate_id.setter
    def rate_id(self, rate_id):
        """
        Sets the rate_id of this LineItemTaxComponent.
        Tax rate ID.

        :param rate_id: The rate_id of this LineItemTaxComponent.
        :type: str
        """
        if rate_id is None:
            raise ValueError("Invalid value for `rate_id`, must not be `None`")

        self._rate_id = rate_id

    @property
    def total_tax(self):
        """
        Gets the total_tax of this LineItemTaxComponent.
        Tax total.

        :return: The total_tax of this LineItemTaxComponent.
        :rtype: float
        """
        return self._total_tax

    @total_tax.setter
    def total_tax(self, total_tax):
        """
        Sets the total_tax of this LineItemTaxComponent.
        Tax total.

        :param total_tax: The total_tax of this LineItemTaxComponent.
        :type: float
        """
        if total_tax is None:
            raise ValueError("Invalid value for `total_tax`, must not be `None`")

        self._total_tax = total_tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LineItemTaxComponent):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
